#!/usr/bin/env python

import logging
import threading
import time

# If you use a daemon thread, the .join() method will make sure the threads complete their execution before the program closes.

def thread_function(name):
    logging.info("Thread %s: starting", name)
    time.sleep(2)
    logging.info("Thread %s: finishing", name)



if __name__ == "__main__":
    format = "%(asctime)s: %(message)s"
    logging.basicConfig(format=format, level=logging.INFO, datefmt="%H:%M:%S")

    # The program keeps a list of Thread objects so that it can then wait for them later using .join()
    threads = list()

    # Create and start threads
    for index in range(3):
        logging.info("Main     : create and start thread %d.", index)
        x = threading.Thread(target=thread_function, args=(index,), daemon=True)
        threads.append(x)
        x.start()

    
    for index, thread in enumerate(threads):
        logging.info("Main      : before joining thread %d.", index)
        thread.join()
        logging.info("Main      : thread %d done", index)




